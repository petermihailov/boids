class Vector2D {
  constructor(x = 0, y = 0) {
    this.x = x;
    this.y = y;
  }

  // –°–ª–æ–∂–µ–Ω–∏–µ
  add(v) {
    if (v instanceof Vector2D) {
      this.x += v.x;
      this.y += v.y;
    } else {
      this.x += v;
      this.y += v;
    }

    return this;
  }

  // –í—ã—á–∏—Ç–∞–Ω–∏–µ
  sub(v) {
    if (v instanceof Vector2D) {
      this.x -= v.x;
      this.y -= v.y;
    } else {
      this.x -= v;
      this.y -= v;
    }

    return this;
  };

  // –£–º–Ω–æ–∂–µ–Ω–∏–µ
  mult(v) {
    if (v instanceof Vector2D) {
      this.x *= v.x;
      this.y *= v.y;
    } else {
      this.x *= v;
      this.y *= v;
    }

    return this;
  };

  // –î–µ–ª–µ–Ω–∏–µ
  div(v) {
    if (v instanceof Vector2D) {
      if (v.x !== 0 && v.y !== 0) {
        this.x /= v.x;
        this.y /= v.y;
      }
    } else {
      if (v !== 0) {
        this.x /= v;
        this.y /= v;
      }
    }

    return this;
  };

  // –ú–∞–≥–Ω–∏—Ç—É–¥–∞ (–¥–ª–∏–Ω–∞) –≤–µ–∫—Ç–æ—Ä–∞
  mag() {
    return Math.hypot(this.x, this.y);
  };

  // –°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–≤—É—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
  // –ï—Å–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç—å —ç—Ç–æ—Ç –∂–µ –≤–µ–∫—Ç–æ—Ä, —Ç–æ –≤—ã—á–∏—Å–ª–∏–º –º–∞–≥–Ω–∏—Ç—É–¥—É –≤–µ–∫—Ç–æ—Ä–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ. –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ
  // —á–µ–º —Å—á–∏—Ç–∞—Ç—å —Ñ–≤–∫—Ç–∏—á–µ—Å–∫—É—é –¥–ª–∏–Ω—É, —Ç.–∫. –Ω–µ –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å –∫–≤.–∫–æ—Ä–µ–Ω—å. –ë—ã–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ª—É—á–∞–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  // –≤–µ–∫—Ç–æ—Ä–æ–≤, –≥–¥–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–µ–∫—Ç–æ—Ä–∞
  dot(v) {
    return this.x * v.x + this.y * v.y;
  };

  // –ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (Euclid distance) –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  dist(v) {
    return Math.hypot(v.x - this.x, v.y - this.y);
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä –¥–æ –¥–ª–∏–Ω—ã 1
  // {x: 10, y: 20} üëâ {x: 0.4454354, y: 0.8908708}
  // –ü–æ–ª–µ–∑–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –º–∞–≥–Ω–∏—Ç—É–¥—É –≤–µ–∫—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  normalize() {
    const len = this.mag();
    if (len !== 0) return this.mult(1 / len);

    return this;
  };

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–≥–Ω–∏—Ç—É–¥—ã –≤–µ–∫—Ç–æ—Ä–∞
  limit(max) {
    const mSq = this.dot(this);
    if (mSq > max * max) {
      this.div(Math.sqrt(mSq)).mult(max);
    }

    return this;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª–∏–Ω—ã –≤–µ–∫—Ç–æ—Ä–∞
  setMag(v) {
    return this.normalize().mult(v);
  };

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤–µ–∫—Ç–æ—Ä–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
  heading() {
    return Math.atan2(this.y, this.x);
  }

  // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π —É–≥–æ–ª
  rotate(angle) {
    const newHeading = this.heading() + angle;
    const mag = this.mag();
    this.x = Math.cos(newHeading) * mag;
    this.y = Math.sin(newHeading) * mag;

    return this;
  };

  // –°—á–∏—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª (–≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö) –º–µ–¥–∂—É –¥–≤—É–º—è –≤–µ–∫—Ç–æ—Ä–∞–º–∏
  angleBetween(v) {
    const dotmagmag = this.dot(v) / (this.mag() * v.mag());
    return Math.acos(Math.min(1, Math.max(-1, dotmagmag)));
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–Ω—ã –ª–∏ –≤–µ–∫—Ç–æ—Ä—ã
  equals(v) {
    return this.x === v.x && this.y === v.y;
  };

  // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
  inverse() {
    return this.div(-this.dot(this));
  };

  // –õ–µ–Ω—å –¥–µ–ª–∞—Ç—å static-–º–µ—Ç–æ–¥—ã, –ø—Ä–æ—â–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä
  // ‚ùå newVector = Vector2D.add(v1, v2)
  // ‚úÖ newVector = v1.clone().add(v2);
  clone() {
    return new Vector2D(this.x, this.y);
  }

  // –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞, –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
  toString() {
    return `Vector2D: {x:${this.x}, y:${this.y}'}`;
  };
}
